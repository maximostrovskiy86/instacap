// import dayjs from 'dayjs';
// import {
//   getFirestore,
//   collection,
//   getDocs,
//   onSnapshot,
//   query,
//   where,
//   orderBy,
//   getDoc,
//   doc,
//   updateDoc,
//   arrayUnion,
//   deleteDoc,
//   increment,
//   setDoc,
//   DocumentReference,
// } from 'firebase/firestore';

// const DB_PREFIX = 'instacap/captures';

// export const saveCapture = async (uid: string, cid: string, data: any) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, 'instacap', 'captures', uid);
//     const docRef = doc(colRef, cid);
//     await setDoc(docRef, data);
//     return () => {
//       deleteDoc(docRef);
//     };
//   } catch (error) {
//     console.error('Error adding document: ', error);
//   }
// };

// export const updateCapture = async (uid: string, cid: string, info: object) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, 'instacap', 'captures', uid);
//     await updateDoc(doc(colRef, cid), { updatedAt: dayjs().unix(), ...info });
//   } catch (error) {
//     console.error('Error update user: ', error);
//   }
// };

// export const getAnonymousPopulation = async () => {
//   const db = getFirestore();
//   const docRef = doc(db, 'instacap/anonymous') as DocumentReference<{
//     population: number;
//   }>;
//   try {
//     await updateDoc(docRef, {
//       population: increment(1),
//     });
//     const docSnap = await getDoc(docRef);
//     if (docSnap.exists()) {
//       return docSnap.data().population;
//     }
//   } catch (error) {
//     const docRef = doc(db, 'instacap/anonymous');
//     const docSnap = await getDoc(docRef);
//     if (!docSnap.exists()) {
//       await setDoc(docRef, { population: 1 });
//     }
//     return 1;
//   }
// };

// export const getList = async (uid: string, cb: Function) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, `${DB_PREFIX}/${uid}`);

//     const q = query(colRef, orderBy('createdAt', 'desc'));

//     const colSnap = await getDocs(q);

//     const result: Capture.Info[] = [];

//     colSnap.forEach((docSnap) => {
//       if (docSnap.exists()) {
//         result.push(docSnap.data() as Capture.Info);
//       }
//     });

//     cb(result);
//   } catch (error) {
//     console.log(error);
//   }
// };

// export const getListByGroup = async (
//   uid: string,
//   group: string,
//   cb: Function
// ) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, `${DB_PREFIX}/${uid}`);

//     const q = query(colRef, where('group', '==', group));

//     const colSnap = await getDocs(q);

//     const result: Capture.Info[] = [];

//     colSnap.forEach((docSnap) => {
//       if (docSnap.exists()) {
//         result.push(docSnap.data() as Capture.Info);
//       }
//     });

//     cb(result);
//   } catch (error) {
//     console.log(error);
//   }
// };

// export const getSub = (uid: string, cb: Function) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, `${DB_PREFIX}/${uid}`);

//     const q = query(colRef, where('createdAt', '>', dayjs().unix()));

//     const unsub = onSnapshot(q, (snapshot) => {
//       snapshot.docChanges().forEach((change) => {
//         console.log(change.type);
//         if (change.type === 'added') {
//           cb(change.doc.data());
//         }
//       });
//     });

//     return () => {
//       unsub();
//     };
//   } catch (error) {
//     console.log(error);
//     return () => {};
//   }
// };

// export const getListByGroupSub = (uid: string, group: string, cb: Function) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, `${DB_PREFIX}/${uid}`);

//     const q = query(colRef, where('group', '==', group));

//     const unsub = onSnapshot(q, (snapshot) => {
//       snapshot.docChanges().forEach((change) => {
//         console.log(change.type);
//         if (change.type === 'added') {
//           cb(change.doc.data());
//         }
//       });
//     });

//     return () => {
//       unsub();
//     };
//   } catch (error) {
//     console.log(error);
//     return () => {};
//   }
// };

// export const getPublicOne = async (uid: string, cid: string, cb: Function) => {
//   try {
//     const db = getFirestore();
//     const docRef = doc(db, `${DB_PREFIX}/${uid}/${cid}`);
//     const docSnap = await getDoc(docRef);
//     if (docSnap.exists()) {
//       cb(docSnap.data() as Capture.Info);
//     } else {
//       cb(null);
//     }
//   } catch (error) {
//     console.log(error);
//   }
// };

// export const getCaptureInfoSub = (uid: string, cid: string, cb: Function) => {
//   try {
//     const db = getFirestore();
//     const docRef = doc(db, `${DB_PREFIX}/${uid}/${cid}`);

//     const unsub = onSnapshot(
//       docRef,
//       (doc) => {
//         cb(doc.data());
//       },
//       (err) => {
//         console.log(err);
//       }
//     );

//     return () => {
//       // console.log('here');
//       unsub();
//     };
//   } catch (error) {
//     console.log(error);
//     return () => {};
//   }
// };

// export const setUser = async (uid: string, info: object) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, 'instacap', 'users', 'uids');
//     await setDoc(doc(colRef, uid), { createdAt: dayjs().unix(), ...info });
//   } catch (error) {
//     console.error('Error set user: ', error);
//   }
// };

// export const getUser = async (uid: string) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, 'instacap', 'users', 'uids');
//     const docSnap = await getDoc(doc(colRef, uid));
//     if (docSnap.exists()) {
//       return docSnap.data();
//     }
//     return false;
//   } catch (error) {
//     console.error('Error get user: ', error);
//   }
// };

// export const getUserSub = (uid: string, cb: Function) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, 'instacap', 'users', 'uids');
//     const unsub = onSnapshot(
//       doc(colRef, uid),
//       (doc) => {
//         cb({ ...doc.data(), uid });
//       },
//       (err) => {
//         console.log(err);
//       }
//     );

//     return () => {
//       // console.log('here');
//       unsub();
//     };
//   } catch (error) {
//     console.log('Error get creator info: ', error);
//   }
// };

// export const updateUser = async (uid: string, info: object) => {
//   try {
//     const db = getFirestore();
//     const colRef = collection(db, 'instacap', 'users', 'uids');
//     await updateDoc(doc(colRef, uid), { updatedAt: dayjs().unix(), ...info });
//   } catch (error) {
//     console.error('Error update user: ', error);
//   }
// };

// export const setCaptureComment = async (
//   uid: string,
//   cid: string,
//   comment: Capture.Comment
// ) => {
//   const db = getFirestore();
//   const docRef = doc(db, `${DB_PREFIX}/${uid}/${cid}`);

//   await updateDoc(docRef, {
//     comments: arrayUnion(comment),
//   });
// };

// export const setCaptureCommentReply = async (
//   uid: string,
//   cid: string,
//   comments: Capture.Comment[]
// ) => {
//   const db = getFirestore();
//   const docRef = doc(db, `${DB_PREFIX}/${uid}/${cid}`);
//   await updateDoc(docRef, {
//     comments,
//   });
// };

// export const deleteCapture = async (uid: string, cid: string) => {
//   const db = getFirestore();
//   const docRef = doc(db, `${DB_PREFIX}/${uid}/${cid}`);
//   await deleteDoc(docRef);
// };

// export const addViewer = async (
//   uid: string,
//   cid: string,
//   currentUserID: string,
//   noDataCb: Function
// ) => {
//   try {
//     const db = getFirestore();
//     const docRef = doc(db, `${DB_PREFIX}/${uid}/${cid}`);
//     const docSnap = await getDoc(docRef);
//     if (docSnap.exists()) {
//       const data = docSnap.data() as Capture.Info;
//       if (!data.view.viewer.includes(currentUserID)) {
//         console.log(currentUserID);
//         const viewer = [...data.view.viewer, currentUserID];
//         await updateDoc(docRef, {
//           view: {
//             count: viewer.length,
//             viewer,
//           },
//         });
//       }
//     } else {
//       noDataCb();
//     }
//   } catch (error) {
//     console.log(error);
//   }
// };
